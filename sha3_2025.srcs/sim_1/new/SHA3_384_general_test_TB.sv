`timescale 1ns / 1ps

/*
10mess 89ABCDEF X 10: hash: 97DE7C27EF941BA06424DD9F0455F84869AF1E5F419E2441E25ED9ED2DB911C2F1FC227E9D80B675A34FCAB944F4599297DE7C27EF941BA06424DD9F0455F84869AF1E5F419E2441E25ED9ED2DB911C2F1FC227E9D80B675A34FCAB944F45997
15mess 89ABCDEF X 15: hash: 86E82F16B71014DF529D76C08FECFD8C9ED09F239FCA662303A3BE6F9F60753AD38CDD1A40D7080ABF398ABB2CE454B386E82F16B71014DF529D76C08FECFD8C9ED09F239FCA662303A3BE6F9F60753AD38CDD1A40D7080ABF398ABB2CE45486
20mess 89ABCDEF X 20: hash: 4A70594D0913FBE4DEF853B77104560E98869B3A0239E4796F94FB26C31ED6AAA14D8391AC1CF1573FF96309319814B44A70594D0913FBE4DEF853B77104560E98869B3A0239E4796F94FB26C31ED6AAA14D8391AC1CF1573FF963093198144A
35mess 89ABCDEF X 35: hash: A4B2E696D800BA92AE5CBD43D2B03F9A7622476FB7B72B7A7889A6EA720F808603206CCBB5B2D962F15BE23E64986033A4B2E696D800BA92AE5CBD43D2B03F9A7622476FB7B72B7A7889A6EA720F808603206CCBB5B2D962F15BE23E649860A4
30mess 89ABCDEF X 30: hash: B4C313B374023AF718BAC33E77CCE98C78641E6EB3FAA3AA600822D18C07DC2CA290C60A0CE11E347C0ED24B5B88D701B4C313B374023AF718BAC33E77CCE98C78641E6EB3FAA3AA600822D18C07DC2CA290C60A0CE11E347C0ED24B5B88D7B4
25mess 89ABCDEF X 25: hash: F3DC379227451E76BCC473498B552D0DA0A58B859AC523275E2C4C98D85171E058D80AFE545716F5F8B145A9FD47F9A8F3DC379227451E76BCC473498B552D0DA0A58B859AC523275E2C4C98D85171E058D80AFE545716F5F8B145A9FD47F9F3
26mess 89ABCDEF X 26: hash: 1529C2130D35CC25D848BD943447C1204CD3306F20B2281B7D9C51F52E50875C20F5E5989C637502B48867E1384B4CEA1529C2130D35CC25D848BD943447C1204CD3306F20B2281B7D9C51F52E50875C20F5E5989C637502B48867E1384B4C15
27mess 89ABCDEF X 27: hash: E20BC5809BDFE462BDE2D81380500AFEC002D886E75A328F2237DADC0BB8B51F721AD8E436DDB288538D5C31AA8543FFE20BC5809BDFE462BDE2D81380500AFEC002D886E75A328F2237DADC0BB8B51F721AD8E436DDB288538D5C31AA8543E2
*/


module SHA3_384_general_test_TB();

localparam DATA_INPUT_WIDTH = 32;
localparam MEMORY_DEPTH = 5;
localparam OUTPUT_HASH_SIZE = 384;
localparam PERMUTATION_INPUT_WORD_WIDTH = 1600 - 2 * OUTPUT_HASH_SIZE;

logic [DATA_INPUT_WIDTH-1:0] data_in_seq;
logic [OUTPUT_HASH_SIZE-1:0] hash_out;
logic clk, a_rst, ce, data_in_valid, hash_out_valid,blocked_in;

SHA3_384_IN_32W #(
    .MEMORY_DEPTH_RATIO_SIZED(MEMORY_DEPTH)
)   UUT (
    .CLK(clk),
    .A_RST(a_rst),
    .CE(ce),
    .IN_BUS(data_in_seq),
    .IN_VALID(data_in_valid),
    .BLOCKED_INPUT(blocked_in),
    .SHA3_HASH_OUTPUT(hash_out),
    .SHA3_HASH_VALID(hash_out_valid)
);

initial begin
	#0 clk = 1'b1;
	forever 
	#5 clk = ~clk;
end

initial begin
    #0 a_rst       =  1'b1;
    ce          =  1'b0;
    data_in_valid   =  1'b0;
    #50 a_rst   =  1'b0;
    #50 ce      =  1'b1; //100
    #50 data_in_valid   = 1'b1; //1mess start 150
    #100 data_in_valid  = 1'b0; //1mess end 250
    #10 data_in_valid   = 1'b1; //2mess start 260
    #150 data_in_valid  = 1'b0; //2mess end 410
    #10 data_in_valid   = 1'b1; //3mess start 420
    #200 data_in_valid  = 1'b0; //3mess end 620
    #10 data_in_valid   = 1'b1; //4mess start 630
    #350 data_in_valid  = 1'b0; //4mess end 980
    #10 data_in_valid   = 1'b1; //5mess start 990
    #300 data_in_valid  = 1'b0; //5mess end 1290
    #10 data_in_valid   = 1'b1; //6mess start 1300
    #250 data_in_valid  = 1'b0; //6mess end 1550
    #10 data_in_valid   = 1'b1; //7mess start 1560
    #260 data_in_valid  = 1'b0; //7mess end 1820
    #10 data_in_valid   = 1'b1; //8mess start 1830
    #270 data_in_valid  = 1'b0; //8mess end 2100
    #1200 $finish;
    
end

initial begin
    #0 data_in_seq      =  {4{8'hF0}};
    #140 data_in_seq    =  {32'h91D5B3F7};
    #2160 data_in_seq   =   {4{8'hF0}};
end

endmodule
